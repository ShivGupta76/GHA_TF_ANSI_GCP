name: 'Terraform CI'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest.
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Debug Credentials2
      run: echo ${{ secrets.GOOGLE_CREDENTIALS }}
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
     # run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  ansible:
    name: 'Ansible'
    runs-on: ubuntu-latest
    needs: terraform  # Make sure Ansible runs after Terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Check if Ansible is installed
      id: ansible_check
      run: ansible --version || echo "Ansible not found"
      continue-on-error: true

    - name: Install Ansible
      if: steps.ansible_check.outcome == 'failure'
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible    
      
    - name: ping VM
      run: ansible -i inventory.ini -m ping -vvv all
      env:        
        ANSIBLE_HOST_KEY_CHECKING: False  # Disable host key checking for simplicity       
        ANSIBLE_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ANSIBLE_SSH_USER: ${{ secrets.YOUR_SSH_USERNAME }}

    - name: Run Ansible Playbook
      run: |
        cd ansible  # Change to the Ansible directory
        ansible-playbook -i inventory.ini install_apache.yml all      
      env:        
        ANSIBLE_HOST_KEY_CHECKING: False  # Disable host key checking for simplicity       
        ANSIBLE_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ANSIBLE_SSH_USER: ${{ secrets.YOUR_SSH_USERNAME }}
    #   with:
    #     # Required, playbook filepath
    #     playbook: deploy.yml
    #     # Optional, directory where playbooks live
    #     directory: ./
    #     # Optional, SSH private key
    #     key: ${{secrets.SSH_PRIVATE_KEY}}
    #     # Optional, literal inventory file contents
    #     inventory: |
    #         [all]
    #         example.com
        
    #         [group1]
    #         example.com
          